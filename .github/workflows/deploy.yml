name: Deploy
run-name: "🚛 CD: Deploy Artifacts (${{ github.event.inputs.ref }})"
on:
  # push:
  #   branches:
  #     - main
  #     - 'releases/**'

  # Other workflows sending and triggering this workflow.
  # Also, trigger this manually on GitHub Actions using a button
  workflow_dispatch:
    inputs:
      ref: # we expect an input variable named "ref"
        required: true

  # This workflow is listening on other workflows to reach some sort of milestone or event (in this case, completed milestone on both Backend and Frontend CIs) 
  # workflow_run:
  #   workflows: ["BackendCI"] # , Frontend CI
  #   types: [completed]

# This concurrency group for deploy is "prod-green"
# TODO: I need to understand this more
concurrency:
  group: ${{ github.run_id }} # "prod-green" # 
  cancel-in-progress: true

jobs:
  provision_backend:
    name: 🏢 Provision Backend Infrastructure
    runs-on: ubuntu-latest
    outputs:
      backend_url: http://${{ steps.provision.outputs.ec2_public_url }}:5001
      backend_host: ${{ steps.provision.outputs.ec2_public_url }}
      # url: ${{ steps.be_infra.outputs.backend_url }}
    
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      # - name: Print the vars to STDOUT
      #   run: |
      #     echo provision_backend job
      #     echo Input value (${{ github.event.inputs.ref }})
      #     # echo ${{ github.sha }}
      #     # echo ${{ github.run_id }}
      #     # echo ${{ github.workspace }}
      #     # echo ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     # echo ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     # echo ${{ vars.AWS_REGION }}
      #     # # echo ${{ vars.SECRET_TEST }}
      #     # # echo ${{ env.SECRET_TEST }}
      #     # # echo ${{ secrets.SECRET_TEST }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        # with:
        #   terraform_wrapper: false
        #   terraform_version: 1.2.9

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          # role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          # role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          # role-duration-seconds: 1200
          # role-session-name: MySessionName

      - name: Use commit workspace
        uses: dflook/terraform-new-workspace@v1
        with:
          path: util/terraform/backend
          workspace: ec2-backend-${{ github.event.inputs.ref }}

      - name: Provision
        continue-on-error: true
        id: provision
        uses: dflook/terraform-apply@v1
        with:
          workspace: ec2-backend-${{ github.event.inputs.ref }}
          auto_approve: true
          path: util/terraform/backend
          variables: |
            instance_name = "ec2-backend-${{ github.event.inputs.ref }}"
      
      - name: Print out some variables
        run: |
          echo ${{ github.workspace }}
          echo ${{ github.event.inputs.ref }}
          echo ${{ steps.provision.outputs.ec2_public_url }}
          echo http://${{ steps.provision.outputs.ec2_public_url }}:5001

      # - name: Create Backend Infrastructure
      #   id: be_infra
      #   run: |
      #     cd util/terraform/backend
      #     # create a text file named "terraform.tfvars" that contains variables (similar to .env file) to be used by terraform
      #     # instance_name must be defined as input variable in terraform
      #     echo "instance_name=\"ec2-backend-${{ github.run_number }}\"" >> terraform.tfvars
      #     terraform init
      #     terraform plan
      #     terraform apply -auto-approve
      #     # Get/Extract the public ip of the created ec2 instance from the output file of terraform
      #     # EC2_PUBLIC_IP must be defined as output in terraform
      #     export EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)
      #     # Save the public ip of the created ec2 instance into GitHub env file in a variable named EC2_HOST to give us access to the data in another context
      #     echo "EC2_HOST=${EC2_PUBLIC_IP}" >> $GITHUB_ENV
      #     # Here, we are just making data available in another context (later we use these variables with Ansible and smoke testing)
      #     echo "::set-output name=backend_url::$EC2_PUBLIC_IP"

  trigger_cleanup_on_failure:
    name: ⛔ Trigger Cleanup for Failing Environment
    runs-on: ubuntu-latest
    needs: [provision_backend]
    if: always()
    # if: success()
    # if: failure()
    # if: success() || failure()
    # if: '!cancelled()'
    permissions: write-all
    steps:      
      - name: Print the vars to STDOUT
        run: echo ${{ github.event.inputs.ref }}
          # echo ${{ github.sha }}
          # echo ${{ github.run_id }}
          # echo ${{ github.workspace }}
          # echo ${{ secrets.AWS_ACCESS_KEY_ID }}
          # echo ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # echo ${{ vars.AWS_REGION }}
          # exit 0

      - name: Dispatch
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Cleanup
          inputs: '{ "ref": "${{ github.event.inputs.ref }}", "env_name": "⛔ Detroy Green Env after Failed Deployment" }'